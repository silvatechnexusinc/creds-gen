<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <meta name="description" content="Silva Tech Inc - Streamlined QR Code and Pairing Features"/>
  <meta name="author" content="Silva Tech Inc"/>
  <title>Silva Tech Inc - Tools</title>

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet"/>
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>

  <style>
    :root {
      --primary: #00e6b8;
      --primary-dark: #00a97f;
      --accent: #00ffc3;
      --background: #0a0a15;
      --text: #f0f0f0;
      --text-muted: #999;
      --glass-bg: rgba(10, 10, 21, 0.75);
      --glass-border: rgba(255, 255, 255, 0.1);
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      position: relative;
      background: var(--background);
      color: var(--text);
      font-family: 'Poppins', sans-serif;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
    }

    /* Portrait by default */
    body::before {
      content: '';
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: url('https://files.catbox.moe/7ie012.jpg') center/cover no-repeat;
      z-index: -3;
      transition: background-image 0.5s ease;
      opacity: 0.7;
    }

    /* Landscape override */
    @media (orientation: landscape) {
      body::before {
        background-image: url('https://files.catbox.moe/gmwtd5.jpg');
      }
    }

    /* Animated gradient overlay */
    body::after {
      content: '';
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: 
        radial-gradient(circle at 20% 20%, rgba(0, 230, 184, 0.15), transparent 40%),
        radial-gradient(circle at 80% 80%, rgba(0, 169, 127, 0.12), transparent 40%),
        radial-gradient(circle at 40% 70%, rgba(0, 255, 195, 0.08), transparent 40%);
      z-index: -2;
      animation: pulse 12s infinite ease-in-out alternate;
    }

    @keyframes pulse {
      0%, 100% { 
        transform: scale(1) rotate(0deg);
        opacity: 0.8;
      }
      50% { 
        transform: scale(1.1) rotate(1deg);
        opacity: 1;
      }
    }

    .container {
      text-align: center;
      position: relative;
      z-index: 1;
      padding: 3rem 2rem;
      max-width: 900px;
      width: 90%;
      background: var(--glass-bg);
      border-radius: 24px;
      backdrop-filter: blur(16px);
      -webkit-backdrop-filter: blur(16px);
      box-shadow: 
        0 20px 40px rgba(0, 0, 0, 0.4),
        0 0 0 1px var(--glass-border),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(0, 230, 184, 0.15);
      overflow: hidden;
      transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .container:hover {
      transform: translateY(-5px);
      box-shadow: 
        0 25px 50px rgba(0, 0, 0, 0.5),
        0 0 0 1px var(--glass-border),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }

    .logo-container {
      position: relative;
      margin-bottom: 1.5rem;
    }

    .logo {
      width: 100px;
      height: 100px;
      margin-bottom: 1rem;
      filter: drop-shadow(0 0 20px rgba(0, 230, 184, 0.5));
      animation: float 6s ease-in-out infinite;
      position: relative;
      z-index: 1;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
    }

    .logo-glow {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 120px;
      height: 120px;
      background: radial-gradient(circle, rgba(0, 230, 184, 0.3) 0%, transparent 70%);
      border-radius: 50%;
      filter: blur(10px);
      animation: pulse-glow 4s ease-in-out infinite alternate;
    }

    @keyframes pulse-glow {
      0% { opacity: 0.4; transform: translate(-50%, -50%) scale(0.9); }
      100% { opacity: 0.7; transform: translate(-50%, -50%) scale(1.1); }
    }

    h1 {
      font-size: 3.5rem;
      background: linear-gradient(90deg, var(--primary), var(--primary-dark), var(--accent), var(--primary));
      background-size: 300% auto;
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      animation: shimmer 8s infinite linear;
      font-weight: 700;
      margin: 1rem 0;
      text-shadow: 0 0 20px rgba(0, 230, 184, 0.3);
      letter-spacing: 1px;
    }

    @keyframes shimmer {
      to { background-position: 300% center; }
    }

    .subtitle {
      margin-top: 1rem;
      color: var(--text-muted);
      font-size: 1.2rem;
      max-width: 700px;
      margin-inline: auto;
      line-height: 1.7;
      font-weight: 300;
      position: relative;
      padding: 0 1rem;
    }

    .subtitle::before, .subtitle::after {
      content: '';
      position: absolute;
      top: 50%;
      width: 30px;
      height: 1px;
      background: linear-gradient(90deg, transparent, var(--primary));
    }

    .subtitle::before {
      left: 0;
    }

    .subtitle::after {
      right: 0;
      background: linear-gradient(90deg, var(--primary), transparent);
    }

    .btn-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1.5rem;
      margin-top: 3rem;
    }

    .btn {
      position: relative;
      overflow: hidden;
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(0, 230, 184, 0.3);
      border-radius: 16px;
      color: var(--text);
      padding: 1.2rem 1.5rem;
      font-size: 1.1rem;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 1.5px;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      z-index: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }

    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
      transition: left 0.7s ease;
      z-index: -1;
    }

    .btn:hover::before {
      left: 100%;
    }

    .btn::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(0, 230, 184, 0.1), rgba(0, 169, 127, 0.05));
      border-radius: 16px;
      z-index: -2;
      opacity: 0;
      transition: opacity 0.4s ease;
    }

    .btn:hover::after {
      opacity: 1;
    }

    .btn:hover {
      color: var(--text);
      border-color: var(--primary);
      box-shadow: 
        0 12px 25px rgba(0, 230, 184, 0.3),
        0 0 0 1px rgba(0, 230, 184, 0.2);
      transform: translateY(-6px);
    }

    .btn:active {
      transform: translateY(-2px);
    }

    .btn i {
      margin-right: 10px;
      font-size: 1.3rem;
      transition: transform 0.3s ease;
    }

    .btn:hover i {
      transform: scale(1.2);
    }

    .footer {
      margin-top: 3.5rem;
      font-size: 0.9rem;
      color: var(--text-muted);
      font-family: 'JetBrains Mono', monospace;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1.5rem;
      flex-wrap: wrap;
    }

    .audio-control {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      margin-top: 0.5rem;
    }

    .audio-control button {
      background: transparent;
      border: 1px solid var(--primary);
      color: var(--text);
      border-radius: 50%;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      backdrop-filter: blur(5px);
      -webkit-backdrop-filter: blur(5px);
    }

    .audio-control button:hover {
      background: var(--primary);
      color: #0f0f17;
      transform: scale(1.1);
      box-shadow: 0 0 15px rgba(0, 230, 184, 0.5);
    }

    @media (max-width: 768px) {
      h1 { font-size: 2.5rem; }
      .subtitle { font-size: 1.1rem; }
      .btn-grid { grid-template-columns: 1fr; }
      .container { padding: 2rem 1.5rem; }
    }

    /* Floating particles effect */
    .particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      pointer-events: none;
    }

    .particle {
      position: absolute;
      width: 4px;
      height: 4px;
      background-color: var(--primary);
      border-radius: 50%;
      opacity: 0.5;
      animation: float 15s infinite linear;
      box-shadow: 0 0 10px var(--primary);
    }

    @keyframes float {
      0% {
        transform: translateY(0) translateX(0) rotate(0deg);
        opacity: 0;
      }
      10% {
        opacity: 0.7;
      }
      90% {
        opacity: 0.4;
      }
      100% {
        transform: translateY(-100vh) translateX(100px) rotate(360deg);
        opacity: 0;
      }
    }

    /* Notification styling */
    .notification {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0, 230, 184, 0.2);
      color: white;
      padding: 12px 24px;
      border-radius: 50px;
      font-size: 0.9rem;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(0, 230, 184, 0.3);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      z-index: 1000;
      transition: opacity 0.5s ease;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    /* Loading spinner for audio */
    .audio-loading {
      display: none;
      width: 20px;
      height: 20px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="logo-container">
      <div class="logo-glow"></div>
      <svg class="logo" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
      </svg>
    </div>
    <h1>Silva Tech Tools</h1>
    <p class="subtitle">Streamlined solutions for your digital workflow. Experience our innovative tools designed to enhance productivity and connectivity.</p>

    <div class="btn-grid">
      <button onclick="window.open('/qr', '_self')" class="btn">
        <i class="fas fa-qrcode"></i> QR Code
      </button>
      <button onclick="window.open('/pair', '_self')" class="btn">
        <i class="fas fa-link"></i> Pair Code
      </button>
      <button onclick="window.open('https://github.com/SilvaTechB', '_blank')" class="btn">
        <i class="fab fa-github"></i> GitHub
      </button>
      <button onclick="window.open('https://whatsapp.com/channel/0029VaAkETLLY6d8qhLmZt2v', '_blank')" class="btn">
        <i class="fab fa-whatsapp"></i> WhatsApp
      </button>
    </div>

    <div class="footer">
      <span>© Silva Tech Inc. All rights reserved.</span>
      <div class="audio-control">
        <button id="mute-btn" title="Mute/Unmute">
          <i class="fas fa-volume-up"></i>
        </button>
        <div class="audio-loading" id="audio-loading"></div>
      </div>
    </div>
  </div>

  <div class="particles" id="particles"></div>

  <audio id="background-audio" loop>
    <source src="https://files.catbox.moe/755ni6.mp3" type="audio/mpeg">
  </audio>

  <script>
    // Create floating particles
    function createParticles() {
      const particlesContainer = document.getElementById('particles');
      const particleCount = 60;
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // Random position
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        particle.style.left = `${posX}%`;
        particle.style.top = `${posY}%`;
        
        // Random size
        const size = Math.random() * 4 + 1;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        
        // Random animation duration
        const duration = Math.random() * 20 + 10;
        particle.style.animationDuration = `${duration}s`;
        particle.style.animationDelay = `${Math.random() * 5}s`;
        
        // Random color variation
        const hue = 170 + Math.random() * 20 - 10; // Around teal color
        const saturation = 80 + Math.random() * 20;
        particle.style.backgroundColor = `hsl(${hue}, ${saturation}%, 60%)`;
        
        particlesContainer.appendChild(particle);
      }
    }

    // Audio management
    const audio = document.getElementById('background-audio');
    const muteBtn = document.getElementById('mute-btn');
    const muteIcon = muteBtn.querySelector('i');
    const audioLoading = document.getElementById('audio-loading');
    
    // Restore audio time if available
    audio.addEventListener('loadedmetadata', () => {
      const savedTime = localStorage.getItem('audioTime');
      if (savedTime !== null) {
        audio.currentTime = savedTime;
      }
      
      // Check if user has previously muted
      const isMuted = localStorage.getItem('audioMuted') === 'true';
      audio.muted = isMuted;
      muteIcon.className = isMuted ? 'fas fa-volume-mute' : 'fas fa-volume-up';
    });
    
    // Save current playback time periodically
    audio.addEventListener('timeupdate', () => {
      localStorage.setItem('audioTime', audio.currentTime);
    });
    
    // Mute/unmute functionality
    muteBtn.addEventListener('click', () => {
      audio.muted = !audio.muted;
      muteIcon.className = audio.muted ? 'fas fa-volume-mute' : 'fas fa-volume-up';
      localStorage.setItem('audioMuted', audio.muted);
      
      // Visual feedback
      muteBtn.style.transform = 'scale(0.9)';
      setTimeout(() => {
        muteBtn.style.transform = 'scale(1)';
      }, 150);
    });
    
    // Attempt to play audio automatically
    function initAudio() {
      audioLoading.style.display = 'block';
      
      const playPromise = audio.play();
      
      if (playPromise !== undefined) {
        playPromise.then(() => {
          // Audio started successfully
          audioLoading.style.display = 'none';
        }).catch(error => {
          // Autoplay was prevented
          audioLoading.style.display = 'none';
          console.log('Autoplay prevented. User interaction required to play audio.');
          
          // Show notification
          showNotification('🔊 Audio available - click the mute button to control');
        });
      }
    }
    
    // Show notification
    function showNotification(message) {
      const notification = document.createElement('div');
      notification.className = 'notification';
      notification.innerHTML = message;
      document.body.appendChild(notification);
      
      // Remove notification after 5 seconds
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 500);
      }, 5000);
    }
    
    // Create particles and initialize audio
    window.addEventListener('DOMContentLoaded', () => {
      createParticles();
      initAudio();
    });

    // Add click effect to buttons
    document.querySelectorAll('.btn').forEach(button => {
      button.addEventListener('click', function() {
        this.style.transform = 'translateY(-2px)';
        setTimeout(() => {
          this.style.transform = 'translateY(-6px)';
        }, 100);
      });
    });
  </script>
</body>
</html>
